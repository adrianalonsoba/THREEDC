<a name="THREEDC"></a >

# THREEDC API reference


#### Function Chain
As in dc.js, majority of THREEDC functions are designed to allow function chaining, meaning it will return the current chart instance
whenever it is appropriate. Therefore configuration of a chart can be written in the following style:
```js
chart.width(300)
     .height(300)
     .depth(0.9)
...
```
## <a name="util" href="#util">#</a>  Main utilities

#### THREEDC.renderAll()
Render all the instantiated charts, the charts contained into panels and the independent charts.

#### THREEDC.removelAll()
Remove all charts fromt the scene.

#### THREEDC.removeEvents()
Remove all events and interactions from the charts, then they can just be visualized.

## <a name="base-mixin" href="#base-mixin">#</a> Base Mixin [Abstract]
It is like a chart father class, each chart type will inherit its properties and functions and it will add its own ones if it needs them.

#### .width(value)
It sets the chart width in the Three.js’s relative units, 100 by default.

#### .height(value)
It sets the chart height in the Three.js’s relative units, 100 by default.

#### .depth(value)
Sets the depth of the charts, in Three.js’s relative units. Different default values for each chart type.

#### .dimension(value) - **mandatory**
Sets the [crossfilter dimension](https://github.com/square/crossfilter/wiki/API-Reference#wiki-dimension), necessary to build the charts.

#### .group(value) - **mandatory**
Set or get group attribute of a chart. In dc a group is a
[crossfilter group](https://github.com/square/crossfilter/wiki/API-Reference#wiki-group). Usually the group should be
created from the particular dimension associated with the same chart. If the value is given, then it will be used as
the new group.
Sets the [crossfilter group](https://github.com/square/crossfilter/wiki/API-Reference#wiki-group) of the chart, necessary to build the charts. Usually the group should be
created from the particular dimension associated with the same chart.


